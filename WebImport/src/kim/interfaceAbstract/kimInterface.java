package kim.interfaceAbstract;

public interface kimInterface {
	int result = 1;
	void add();
}
/*
인터페이스는 왜 사용하고 어떻게 사용할까?
추상클래스와 비슷하고 공통적으로 사용되는 형태를 껍데기로 만들어 놓고 자식클래스들이 입맛에 맞게 구현하도록 하고 
자식클래스를사용할때 겉보기에는 똑같은모습으로 보이도록 할 목적으로 사용하는것

 추상클래스의 예를 들어 설명 동물 클래스 -움직이다() 동일한 메소드를 만들어 놓고 걸어가는 기능을 구현하고 
 토끼 는 뛰어가는 기능 참새는 날아가는 기능 구현하도록 만들어 두면 나중에  우리가 토끼 클래스가 어떤 메소드가 있고 어떻게 사용해야하는지 일일이 익힐 필요가 없이 동물 인터페이스를 구현 했다라고만 
 알려줘도 움직이다 메소드를 사용하면 토끼 클래스를 사용할수 있겠구나 하고 금방 알아볼수있음
 즉 클래스를 사용하는 사람은 클래스 내부가 어떻게 구현되어 있는지 관심이 없음
 어떻게 사용하는지 겉보기가 어떻게 생겼는지만 관심있음
 겉보기만 만들어둔 인터페이스 라는 놈을 사용해서 상속받은 모든 자식 클래스를 똑같이 사용할수 있다는 장점이 생기게 됨
 
 인터페이스를 잘 만들어 두면 가져다 쓰는 사람은 인터페이스에서 정한대로 가져다 쓰기만 하면 되고 또 인터페이스를 상속받아서 구현하는 개발자는 인터페이스에 있는 형태대로만 사용이 되니 그대로만 사용할수있도록 만들어 주기만 하면되는것

다형성
다형성은 인터페이스 뿐아니라 부모클래스 변수로 자식클래스를 가르키도록 해서 부모클래스를 가지고 자식클래스를 사용하게 하는것도 다형성이라부름
부모클래스 변수 = new 자식클래스();
인터페이스 변수 = new 구현클래스();  
  
  
  
 */
/*
public abstract class calculatorInterface1{
	public static final int result = 1;
	void add();

}
  
  
  
  
  
  
  
 */
 